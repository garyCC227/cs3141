
==================== FINAL INTERFACE ====================
2019-07-17 10:30:45.086036 UTC

interface main:Ex05 8022
  interface hash: b2c734f5e8eb79419699406e7bb63f2b
  ABI hash: fbd387a8586b5c8eccbb66e814e6f972
  export-list hash: 3da4f72bc3b8edea781936ead3e3f0fb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 32e7632dee59c40d3796745c3ab41858
  sig of: Nothing
  used TH splices: False
  where
exports:
  Ex05.ai
  Ex05.capitalise
  Ex05.f
  Ex05.guessingGame
  Ex05.human
  Ex05.isEmpty'
  Ex05.midpoint
  Ex05.play
  Ex05.prop_basic
  Ex05.prop_optimality
  Ex05.sumFile
  Ex05.Answer{Ex05.Higher Ex05.Lower}
  Ex05.Player{Ex05.Player guess wrong}
module dependencies:
package dependencies: QuickCheck-2.10.1 array-0.5.2.0
                      base-4.10.1.0* containers-0.5.10.2 deepseq-1.4.3.0
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 mtl-2.2.1
                      pretty-1.1.3.3 primitive-0.6.2.0 random-1.1*
                      template-haskell-2.12.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.10.1:Test.QuickCheck e7cc3bba148aa39b704c2b95e2084a35
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Gen 20415c0ff6bb059b7cbac945820aef4e
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Modifiers 37476154137c7efdaaae8124d883598d
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Property 0587df897fa7010c35224e42faa9f0ee
import  -/  base-4.10.1.0:Data.Char fe4e3458190deeac19969ce15e33bed9
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Maybe 07738c5485acb328136bb15596f8b845
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Err 514b3a24b22e9d7d731c2d0d02d10842
import  -/  base-4.10.1.0:GHC.Float 28e3bf9e258278ac8084e9cab43fd542
import  -/  base-4.10.1.0:GHC.IO e261d8b68ccf81a359626fa520b57d1d
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:GHC.Unicode 49c9de4fffed0d9be65aaeb6a60b757c
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.Environment c9f912affeed5beb387a8c5d2b2c6102
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  base-4.10.1.0:Text.Read 9e862e012b3c71e83cb56fb456188f44
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  mtl-2.2.1:Control.Monad.State 93b8c69680e87135762a6f3506574310
import  -/  random-1.1:System.Random 7425ef878fcdaaac7b607c0c2d51fc7c
import  -/  transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 1a80bdb936666c1b8faf2f03f91a48cc
d508df997803ce458d74f6aa029c6702
  $tc'Higher :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7385800048964871820##
                   1506554466944790601##
                   Ex05.$trModule
                   Ex05.$tc'Higher2
                   0#
                   Ex05.$tc'Higher1) -}
7d8f295f16f4d959ae57edfe5093f626
  $tc'Higher1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
9ae0060075f5ac6dc35f5f775209d916
  $tc'Higher2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Ex05.$tc'Higher3) -}
63cf5e47714c440665d048066d8bbc45
  $tc'Higher3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Higher"#) -}
c39c292ddced67692c3cc130cb84a40f
  $tc'Lower :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2705248780852684995##
                   15361853308452785083##
                   Ex05.$trModule
                   Ex05.$tc'Lower1
                   0#
                   Ex05.$tc'Higher1) -}
46746a14e015f5d7dc135e15077b5ea3
  $tc'Lower1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Ex05.$tc'Lower2) -}
723ce6a63c66e753c6d99171f42bd4d8
  $tc'Lower2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Lower"#) -}
927d4131359291b4aa076457be8d9200
  $tc'Player :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10295210340467546579##
                   7625210227072932694##
                   Ex05.$trModule
                   Ex05.$tc'Player2
                   1#
                   Ex05.$tc'Player1) -}
6c1cf69f53b282b1c6a9440b1d64149b
  $tc'Player1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dda21274e9c34806f95aaa3da37d68bb
  $tc'Player2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Ex05.$tc'Player3) -}
11db4522b4ea8f1b477273779b32f75a
  $tc'Player3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Player"#) -}
155ba4bf562a4469532772bc227709d2
  $tcAnswer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13707522786604775651##
                   12041163879261539996##
                   Ex05.$trModule
                   Ex05.$tcAnswer1
                   0#
                   GHC.Types.krep$*) -}
76c7f1281bc4ceda0e51f4cf7b50fac0
  $tcAnswer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Ex05.$tcAnswer2) -}
f05bf4650b51d152f46e96ecd65f368b
  $tcAnswer2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Answer"#) -}
d75acbf8aeddea311e63dc872777eaf2
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16479177218353262414##
                   192505185483713440##
                   Ex05.$trModule
                   Ex05.$tcPlayer2
                   0#
                   Ex05.$tcPlayer1) -}
440b3e916cbeb8c11fccd91603945d60
  $tcPlayer1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
783cb4484a923300e7f8246332884cdd
  $tcPlayer2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Ex05.$tcPlayer3) -}
fa185b1874bfc0aaa2e960ec132268ba
  $tcPlayer3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player"#) -}
c2d47e350e55c6e5d925cde2b0cbcc73
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Ex05.$trModule3 Ex05.$trModule1) -}
05ab17cbf4323c6ab08561f81d9a4c0d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Ex05.$trModule2) -}
5d384202b47814dd5d795e7e8cf3dfb4
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ex05"#) -}
c87605083be34394718d45c83355148b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Ex05.$trModule4) -}
e880993e751033047378c88e22fe3156
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
7fd4970e6c6bb7e4f4e0378656f59497
  $w$sguessingGame ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Ex05.Player
         (Control.Monad.Trans.State.Lazy.State
            (GHC.Types.Int, GHC.Types.Int))
    -> (GHC.Types.Int, GHC.Types.Int)
    -> (# GHC.Types.Bool, (GHC.Types.Int, GHC.Types.Int) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><S,1*U><L,U(C(U(1*U(U),U)),C(C(U(A,1*U))))><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Ex05.Player
                            (Control.Monad.Trans.State.Lazy.State
                               (GHC.Types.Int, GHC.Types.Int)))
                   (w2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 let {
                   lvl8 :: Control.Monad.Trans.State.Lazy.State
                             (GHC.Types.Int, GHC.Types.Int) ()
                   = case w1 of wild { Ex05.Player ds ds1 -> ds1 Ex05.Lower }
                 } in
                 let {
                   lvl9 :: Control.Monad.Trans.State.Lazy.State
                             (GHC.Types.Int, GHC.Types.Int) ()
                   = case w1 of wild { Ex05.Player ds ds1 -> ds1 Ex05.Higher }
                 } in
                 letrec {
                   $wgo :: GHC.Prim.Int#
                           -> (GHC.Types.Int, GHC.Types.Int)
                           -> (# GHC.Types.Bool, (GHC.Types.Int, GHC.Types.Int) #)
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                   = \ (ww1 :: GHC.Prim.Int#)
                       (w3 :: (GHC.Types.Int, GHC.Types.Int)) ->
                     case ww1 of wild {
                       DEFAULT
                       -> case w of wild1 { GHC.Types.I# x# ->
                          case w1 of wild2 { Ex05.Player ds ds1 ->
                          case (ds
                                  `cast`
                                (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <(GHC.Types.Int, GHC.Types.Int)>_N
                                     <Data.Functor.Identity.Identity>_R
                                     <GHC.Types.Int>_N)
                                  w3)
                                 `cast`
                               (Data.Functor.Identity.N:Identity[0]
                                    <(GHC.Types.Int,
                                      (GHC.Types.Int, GHC.Types.Int))>_R) of wild3 { (,) a1 s' ->
                          case a1 of wild4 { GHC.Types.I# y# ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# x# y#) of wild5 {
                            GHC.Types.False
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# x# y#) of wild6 {
                                 GHC.Types.False
                                 -> $wgo
                                      (GHC.Prim.-# wild 1#)
                                      (case (lvl9
                                               `cast`
                                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                  <(GHC.Types.Int, GHC.Types.Int)>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <()>_N)
                                               s')
                                              `cast`
                                            (Data.Functor.Identity.N:Identity[0]
                                                 <((),
                                                   (GHC.Types.Int,
                                                    GHC.Types.Int))>_R) of wild7 { (,) a2 s'1 ->
                                       s'1 })
                                 GHC.Types.True -> (# GHC.Types.True, s' #) }
                            GHC.Types.True
                            -> $wgo
                                 (GHC.Prim.-# wild 1#)
                                 (case (lvl8
                                          `cast`
                                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                             <(GHC.Types.Int, GHC.Types.Int)>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <()>_N)
                                          s')
                                         `cast`
                                       (Data.Functor.Identity.N:Identity[0]
                                            <((),
                                              (GHC.Types.Int,
                                               GHC.Types.Int))>_R) of wild6 { (,) a2 s'1 ->
                                  s'1 }) } } } } }
                       0# -> (# GHC.Types.False, w3 #) }
                 } in
                 $wgo ww w2) -}
5c4f7dea130d118135aaa9677f4295dc
  $w$sguessingGame1 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Ex05.Player GHC.Types.IO
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><S,1*U><L,U(C(U(U,1*U(U))),C(C(U(U,A))))><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Ex05.Player GHC.Types.IO)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   lvl8 :: GHC.Types.IO ()
                   = case w1 of wild { Ex05.Player ds ds1 -> ds1 Ex05.Lower }
                 } in
                 let {
                   lvl9 :: GHC.Types.IO ()
                   = case w1 of wild { Ex05.Player ds ds1 -> ds1 Ex05.Higher }
                 } in
                 letrec {
                   $wgo :: GHC.Prim.Int#
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                   = \ (ww1 :: GHC.Prim.Int#)
                       (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case ww1 of wild {
                       DEFAULT
                       -> case w1 of wild1 { Ex05.Player ds ds1 ->
                          case ds `cast` (GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                 w3 of ds2 { (#,#) ipv ipv1 ->
                          case w of wild2 { GHC.Types.I# x# ->
                          case ipv1 of wild3 { GHC.Types.I# y# ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# x# y#) of wild4 {
                            GHC.Types.False
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# x# y#) of wild5 {
                                 GHC.Types.False
                                 -> case lvl9 `cast` (GHC.Types.N:IO[0] <()>_R)
                                           ipv of ds3 { (#,#) ipv2 ipv3 ->
                                    $wgo (GHC.Prim.-# wild 1#) ipv2 }
                                 GHC.Types.True -> (# ipv, GHC.Types.True #) }
                            GHC.Types.True
                            -> case lvl8 `cast` (GHC.Types.N:IO[0] <()>_R)
                                      ipv of ds3 { (#,#) ipv2 ipv3 ->
                               $wgo (GHC.Prim.-# wild 1#) ipv2 } } } } } }
                       0# -> (# w3, GHC.Types.False #) }
                 } in
                 $wgo ww w2) -}
9ab35ee1212cfd33db7e3b9d60e80918
  $wguessingGame ::
    GHC.Base.Monad m =>
    GHC.Types.Int -> GHC.Prim.Int# -> Ex05.Player m -> m GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(1*U(A,C(U),A,A,A,A),C(C1(U)),C(C1(U)),A,A)><L,U(U)><S,1*U><L,U(1*U,C(U))>,
     Inline: [0],
     Unfolding: (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: GHC.Types.Int)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Ex05.Player m) ->
                 let {
                   lvl8 :: m GHC.Types.Int
                   = case w2 of wild { Ex05.Player ds ds1 -> ds }
                 } in
                 let {
                   lvl9 :: m ()
                   = case w2 of wild { Ex05.Player ds ds1 -> ds1 Ex05.Lower }
                 } in
                 let {
                   lvl10 :: m ()
                   = case w2 of wild { Ex05.Player ds ds1 -> ds1 Ex05.Higher }
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m = GHC.Base.$p1Monad @ m w
                 } in
                 let {
                   lvl11 :: m GHC.Types.Bool
                   = GHC.Base.pure @ m $dApplicative @ GHC.Types.Bool GHC.Types.True
                 } in
                 let {
                   lvl12 :: m GHC.Types.Bool
                   = GHC.Base.pure @ m $dApplicative @ GHC.Types.Bool GHC.Types.False
                 } in
                 letrec {
                   $wgo :: GHC.Prim.Int# -> m GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ (ww1 :: GHC.Prim.Int#) ->
                     case ww1 of wild {
                       DEFAULT
                       -> let {
                            lvl13 :: m GHC.Types.Bool
                            = GHC.Base.>>
                                @ m
                                w
                                @ ()
                                @ GHC.Types.Bool
                                lvl9
                                ($wgo (GHC.Prim.-# wild 1#))
                          } in
                          let {
                            lvl14 :: m GHC.Types.Bool
                            = GHC.Base.>>
                                @ m
                                w
                                @ ()
                                @ GHC.Types.Bool
                                lvl10
                                ($wgo (GHC.Prim.-# wild 1#))
                          } in
                          GHC.Base.>>=
                            @ m
                            w
                            @ GHC.Types.Int
                            @ GHC.Types.Bool
                            lvl8
                            (\ (x' :: GHC.Types.Int) ->
                             case w1 of wild1 { GHC.Types.I# x# ->
                             case x' of wild2 { GHC.Types.I# y# ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.<# x# y#) of wild3 {
                               GHC.Types.False
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.==# x# y#) of wild4 {
                                    GHC.Types.False -> lvl14 GHC.Types.True -> lvl11 }
                               GHC.Types.True -> lvl13 } } })
                       0# -> lvl12 }
                 } in
                 $wgo ww) -}
a6125fe18795907ce8ff0822099e58c4
  $wmidpoint :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0] -}
c6bff5e39db458fabb325d7ea951e5be
  $wprop_basic ::
    Test.QuickCheck.Modifiers.Positive GHC.Types.Int
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,U(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Modifiers.Positive
                           GHC.Types.Int)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 let {
                   lvl8 :: (GHC.Types.Int, GHC.Types.Int)
                   = (Ex05.play6,
                      w `cast`
                      (Test.QuickCheck.Modifiers.N:Positive[0] <GHC.Types.Int>_R))
                 } in
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   (\ (r :: Test.QuickCheck.Random.QCGen)[OneShot]
                      (ds :: GHC.Types.Int)[OneShot] ->
                    case w `cast`
                         (Test.QuickCheck.Modifiers.N:Positive[0]
                              <GHC.Types.Int>_R) of wild { GHC.Types.I# i ->
                    case System.Random.$wrandomIvalInteger
                           @ Test.QuickCheck.Random.QCGen
                           @ GHC.Types.Int
                           Test.QuickCheck.Random.$fRandomGenQCGen
                           GHC.Num.$fNumInt
                           Ex05.prop_basic2
                           (GHC.Integer.Type.smallInteger i)
                           r of ww4 { (#,#) ww5 ww6 ->
                    ww5 } })
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   (Test.QuickCheck.Property.forAll2 @ GHC.Types.Int)
                   (\ (x :: GHC.Types.Int) ->
                    case w `cast`
                         (Test.QuickCheck.Modifiers.N:Positive[0]
                              <GHC.Types.Int>_R) of ww4 { GHC.Types.I# ww5 ->
                    case Ex05.$w$sguessingGame
                           x
                           ww5
                           Ex05.ai
                           lvl8 of ww6 { (#,#) ww7 ww8 ->
                    ww7 } })
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
242ccba311b3ad02682b63823d94acef
  $wprop_optimality ::
    Test.QuickCheck.Modifiers.Positive GHC.Types.Int
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,U(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Modifiers.Positive
                           GHC.Types.Int)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 let {
                   lvl8 :: GHC.Types.Int
                   = case w `cast`
                          (Test.QuickCheck.Modifiers.N:Positive[0]
                               <GHC.Types.Int>_R) of wild { GHC.Types.I# i ->
                     case Ex05.prop_optimality2 of v { GHC.Types.D# v1 ->
                     case GHC.Prim.logDouble#
                            (GHC.Prim.int2Double# i) of wild4 { DEFAULT ->
                     case GHC.Prim./## wild4 v1 of wild6 { DEFAULT ->
                     let {
                       n :: GHC.Prim.Int# = GHC.Prim.double2Int# wild6
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<## (GHC.Prim.int2Double# n) wild6) of wild1 {
                       GHC.Types.False -> GHC.Types.I# (GHC.Prim.+# n 1#)
                       GHC.Types.True
                       -> GHC.Types.I# (GHC.Prim.+# (GHC.Prim.+# n 1#) 1#) } } } } }
                 } in
                 let {
                   lvl9 :: (GHC.Types.Int, GHC.Types.Int)
                   = (Ex05.play6,
                      w `cast`
                      (Test.QuickCheck.Modifiers.N:Positive[0] <GHC.Types.Int>_R))
                 } in
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   (\ (r :: Test.QuickCheck.Random.QCGen)[OneShot]
                      (ds :: GHC.Types.Int)[OneShot] ->
                    case w `cast`
                         (Test.QuickCheck.Modifiers.N:Positive[0]
                              <GHC.Types.Int>_R) of wild { GHC.Types.I# i ->
                    case System.Random.$wrandomIvalInteger
                           @ Test.QuickCheck.Random.QCGen
                           @ GHC.Types.Int
                           Test.QuickCheck.Random.$fRandomGenQCGen
                           GHC.Num.$fNumInt
                           Ex05.prop_basic2
                           (GHC.Integer.Type.smallInteger i)
                           r of ww4 { (#,#) ww5 ww6 ->
                    ww5 } })
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R))
                   (Test.QuickCheck.Property.forAll2 @ GHC.Types.Int)
                   (\ (x :: GHC.Types.Int) ->
                    case lvl8 of ww4 { GHC.Types.I# ww5 ->
                    case Ex05.$w$sguessingGame
                           x
                           ww5
                           Ex05.ai
                           lvl9 of ww6 { (#,#) ww7 ww8 ->
                    ww7 } })
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
c182d14e964af628f3be0ffe254b464f
  data Answer = Lower | Higher
6dbab084f8a9447a670a624f2c981618
  data Player (m :: * -> *)
    = Player {guess :: m GHC.Types.Int, wrong :: Ex05.Answer -> m ()}
58f4e05ad67335fd239be9e9ecdeb822
  ai ::
    Ex05.Player
      (Control.Monad.Trans.State.Lazy.State
         (GHC.Types.Int, GHC.Types.Int))
  {- Strictness: x -}
6d4e241d2249486f4dfedc054d468a01
  capitalise :: GHC.IO.FilePath -> GHC.IO.FilePath -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Ex05.capitalise1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8811432029caeedebfd1f8da1d131441
  capitalise1 ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (i :: GHC.IO.FilePath)
                   (o :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        i
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 System.IO.appendFile2
                   @ ()
                   o
                   GHC.IO.IOMode.WriteMode
                   (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot] ->
                    GHC.IO.Handle.Text.hPutStr2
                      hdl
                      (GHC.Base.map
                         @ GHC.Types.Char
                         @ GHC.Types.Char
                         GHC.Unicode.toUpper
                         ipv3)
                      GHC.Types.False)
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   ipv2 } }) -}
3bab9ff44ec7ab2c9ead8dbfed3e0589
  f :: [GHC.Base.String] -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U> -}
6dbab084f8a9447a670a624f2c981618
  guess :: Ex05.Player m -> m GHC.Types.Int
  RecSel Left Ex05.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> * (ds :: Ex05.Player m) ->
                 case ds of wild { Ex05.Player ds1 ds2 -> ds1 }) -}
90e013777dfb6505a6a6b8004cae5d92
  guessingGame ::
    GHC.Base.Monad m =>
    GHC.Types.Int -> GHC.Types.Int -> Ex05.Player m -> m GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(A,C(U),A,A,A,A),C(C1(U)),C(C1(U)),A,A)><L,U(U)><S(S),1*U(1*U)><L,U(U,C(U))>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Ex05.Player m) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Ex05.$wguessingGame @ m w w1 ww1 w3 }) -}
689bc6550a55ded082890b8f9a0bf519
  human :: Ex05.Player GHC.Types.IO
  {- Strictness: m,
     Unfolding: (Ex05.Player
                   @ GHC.Types.IO
                   Ex05.human6 `cast` (Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R))
                   Ex05.human1
                     `cast`
                   (<Ex05.Answer>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))) -}
8d7afcd6a01b895847fe17ed6d1fa076
  human1 ::
    Ex05.Answer
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (ds :: Ex05.Answer)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild {
                   Ex05.Lower
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Ex05.human4
                        GHC.Types.True
                        eta
                   Ex05.Higher
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Ex05.human2
                        GHC.Types.True
                        eta }) -}
0fa331067576749718e710bc68327309
  human2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Ex05.human3) -}
b09d4840e91d11f97e7ea2a3df0e5039
  human3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Higher!"#) -}
7080354493da07aa309ec3d05702c3bc
  human4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Ex05.human5) -}
042c4f3c03ea4bdf7898d6d8f7ae0cf2
  human5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lower!"#) -}
f05e3a2aa3dffe9b122f85c3435089f2
  human6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 1, Strictness: <S,U> -}
bc472013e3ddd2a6b0579fb63df9db92
  isEmpty' :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [GHC.Types.Int]) ->
                 case ds of wild {
                   [] -> GHC.Types.True : ipv ipv1 -> GHC.Types.False }) -}
4ebd8234ea69c7785eab748aae9ffc8c
  midpoint :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 case Ex05.$wmidpoint ww1 ww3 of ww4 { DEFAULT ->
                 GHC.Types.I# ww4 } } }) -}
daebcff8841e24411490e162cc6c89a5
  play :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Ex05.play1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
4700df86e9b98d2d5712b06a327297af
  play1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.$fRandomInt3
                        Ex05.play4
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Ex05.$w$sguessingGame1
                        ipv1
                        5#
                        Ex05.human
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case ipv3 of wild {
                      GHC.Types.False -> GHC.CString.unpackCString# Ex05.play3
                      GHC.Types.True -> GHC.CString.unpackCString# Ex05.play2 })
                   GHC.Types.True
                   ipv2 } }) -}
80f1a8aa5c43f45e36800be39ad58cb3
  play2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You got it!"#) -}
2c4bd2afd57457a59489f65979070ff4
  play3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You ran out of guesses!"#) -}
373f1e105853f57f966cec1de99dccaa
  play4 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Ex05.play6, Ex05.play5)) -}
0fdaa4b2eb252f6ac627f258ac13d45a
  play5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100#) -}
03a257af41ba6b2a175437288252b274
  play6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
fab37da1902c439305bc8212ad63321c
  prop_basic ::
    Test.QuickCheck.Modifiers.Positive GHC.Types.Int
    -> Test.QuickCheck.Property.Property
  {- Arity: 3,
     Strictness: <L,U(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Ex05.prop_basic1
                  `cast`
                (Trans
                     (<Test.QuickCheck.Modifiers.Positive GHC.Types.Int>_R
                      ->_R <Test.QuickCheck.Random.QCGen>_R
                      ->_R <GHC.Types.Int>_R
                      ->_R Sym (Test.QuickCheck.Property.N:Prop[0]))
                     (<Test.QuickCheck.Modifiers.Positive GHC.Types.Int>_R
                      ->_R Trans
                               (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                         <Test.QuickCheck.Property.Prop>_R))
                               (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
3530bd1ac99f651e244802be50e9933e
  prop_basic1 ::
    Test.QuickCheck.Modifiers.Positive GHC.Types.Int
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,U(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Test.QuickCheck.Modifiers.Positive GHC.Types.Int)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Ex05.$wprop_basic w ww1 ww2 ww3 ww4 w2 }) -}
863796c97084e9ac71884393ca81d300
  prop_basic2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
ceab9f88c7125f627951d2aa11e5eaa3
  prop_optimality ::
    Test.QuickCheck.Modifiers.Positive GHC.Types.Int
    -> Test.QuickCheck.Property.Property
  {- Arity: 3,
     Strictness: <L,U(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Ex05.prop_optimality1
                  `cast`
                (Trans
                     (<Test.QuickCheck.Modifiers.Positive GHC.Types.Int>_R
                      ->_R <Test.QuickCheck.Random.QCGen>_R
                      ->_R <GHC.Types.Int>_R
                      ->_R Sym (Test.QuickCheck.Property.N:Prop[0]))
                     (<Test.QuickCheck.Modifiers.Positive GHC.Types.Int>_R
                      ->_R Trans
                               (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                         <Test.QuickCheck.Property.Prop>_R))
                               (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
29d5d73c6e180af936ce8fa5a72fc658
  prop_optimality1 ::
    Test.QuickCheck.Modifiers.Positive GHC.Types.Int
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,U(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Test.QuickCheck.Modifiers.Positive GHC.Types.Int)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Ex05.$wprop_optimality w ww1 ww2 ww3 ww4 w2 }) -}
175ec8a6ca3d93d9b088fbb2537edb3b
  prop_optimality2 :: GHC.Types.Double
  {- Unfolding: (case GHC.Prim.logDouble# 2.0## of v { DEFAULT ->
                 GHC.Types.D# v }) -}
993bf8ad8202bcf75a9918139aa4a05b
  sumFile :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Ex05.sumFile1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
9666d204807720c593d98a0823ae0caf
  sumFile1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        (GHC.List.$w!! @ GHC.Base.String ipv1 0#)
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Ex05.f (Data.OldList.lines ipv5) of wild {
                   []
                   -> System.IO.appendFile2
                        @ ()
                        (GHC.List.$w!! @ GHC.Base.String ipv1 1#)
                        GHC.IO.IOMode.WriteMode
                        Ex05.sumFile2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv4
                   : ipv6 ipv7
                   -> System.IO.appendFile2
                        @ ()
                        (GHC.List.$w!! @ GHC.Base.String ipv1 1#)
                        GHC.IO.IOMode.WriteMode
                        (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot] ->
                         GHC.IO.Handle.Text.hPutStr2
                           hdl
                           (case Ex05.sumFile_go wild of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww3
                                   (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                           GHC.Types.False)
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv4 } } } }) -}
5dd84abadb627c7d4db950ddbd936f3b
  sumFile2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   hdl
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.False
                   eta) -}
a9abbe0542e6be55aee61eceadaf8d90
  sumFile_go :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m -}
6dbab084f8a9447a670a624f2c981618
  wrong :: Ex05.Player m -> Ex05.Answer -> m ()
  RecSel Left Ex05.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> * (ds :: Ex05.Player m) ->
                 case ds of wild { Ex05.Player ds1 ds2 -> ds2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

